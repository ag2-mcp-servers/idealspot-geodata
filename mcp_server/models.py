# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:49:45+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Autocomplete(BaseModel):
    input: List[str]


class Category(BaseModel):
    description: str
    id: int
    label: str
    parent_id: str


class Datum(BaseModel):
    description: str
    id: str
    name: str
    version: str


class Geometry(BaseModel):
    coordinates: List[List[float]]
    type: str


class ListAllLocalInsights(BaseModel):
    data: List[Datum]


class Location1(BaseModel):
    areatype: str
    latitude: float
    longitude: float
    radius: int
    type: str
    units: str


class Location3(BaseModel):
    areatype: str
    latitude: float
    longitude: float
    radius: str
    type: str
    units: str


class Metadata1(BaseModel):
    bearing: str
    columns: List[str]
    name: str
    rows: List[str]
    segment_id: str
    state: str


class Parameters(BaseModel):
    category: List[Category]


class Properties1(BaseModel):
    AFFGEOID: Optional[str] = None
    ALAND: int
    AWATER: Optional[int] = None
    BLKGRPCE: Optional[str] = None
    CBSAFP: Optional[str] = None
    CLASSFP: Optional[str] = None
    COUNTYFP: Optional[str] = None
    COUNTYNS: Optional[str] = None
    CSAFP: Optional[str] = None
    DIVISION: Optional[str] = None
    FUNCSTAT: Optional[str] = None
    GEOID: Optional[str] = None
    INTPTLAT: Optional[str] = None
    INTPTLON: Optional[str] = None
    LSAD: Optional[str] = None
    MEMI: Optional[str] = None
    METDIVFP: Optional[str] = None
    MTFCC: Optional[str] = None
    NAME: Optional[str] = None
    NAMELSAD: Optional[str] = None
    PCICBSA: Optional[str] = None
    PCINECTA: Optional[str] = None
    PLACEFP: Optional[str] = None
    PLACENS: Optional[str] = None
    POPULATION: Optional[int] = None
    POP_SQMI: Optional[float] = None
    PO_NAME: Optional[str] = None
    REGION: Optional[str] = None
    SQMI: Optional[float] = None
    STATE: Optional[str] = None
    STATEFP: Optional[str] = None
    STATENS: Optional[str] = None
    STUSPS: Optional[str] = None
    Shape_Area: Optional[float] = None
    Shape_Leng: Optional[float] = None
    TRACTCE: Optional[str] = None
    ZIP_CODE: Optional[str] = None


class Properties2(BaseModel):
    calculated_area_sq_meters: float
    location: Location3
    status: int


class Properties3(BaseModel):
    bearing: str
    roadname: str
    segment_id: str
    state: str


class Properties4(BaseModel):
    name: str


class Roadsegment(BaseModel):
    coordinates: List[List[float]]
    type: str


class Stats(BaseModel):
    aadt: int


class Units(BaseModel):
    field_100k_125k: str = Field(..., alias='$100k-125k')
    field_10k_15k: str = Field(..., alias='$10k-15k')
    field_125k_150k: str = Field(..., alias='$125k-150k')
    field_150k_175k: str = Field(..., alias='$150k-175k')
    field_15k_20k: str = Field(..., alias='$15k-20k')
    field_175k_200k: str = Field(..., alias='$175k-200k')
    field_200k_250k: str = Field(..., alias='$200k-250k')
    field_20k_25k: str = Field(..., alias='$20k-25k')
    field_250k_300k: str = Field(..., alias='$250k-300k')
    field_25k_30k: str = Field(..., alias='$25k-30k')
    field_300k_400k: str = Field(..., alias='$300k-400k')
    field_30k_35k: str = Field(..., alias='$30k-35k')
    field_35k_40k: str = Field(..., alias='$35k-40k')
    field_400k_500k: str = Field(..., alias='$400k-500k')
    field_40k_50k: str = Field(..., alias='$40k-50k')
    field_500k_750k: str = Field(..., alias='$500k-750k')
    field_50k_60k: str = Field(..., alias='$50k-60k')
    field_60k_70k: str = Field(..., alias='$60k-70k')
    field_70k_80k: str = Field(..., alias='$70k-80k')
    field_750k_1M: str = Field(..., alias='$750k-1M')
    field_80k_90k: str = Field(..., alias='$80k-90k')
    field_90k_100k: str = Field(..., alias='$90k-100k')
    Median_Home_Value: str = Field(..., alias='Median Home Value')
    Over__1M: str = Field(..., alias='Over $1M')
    Owner_Occupied_Households: str = Field(..., alias='Owner Occupied Households')
    Under__10k: str = Field(..., alias='Under $10k')
    context_households: str = Field(..., alias='context.households')
    context_landarea: str = Field(..., alias='context.landarea')


class LocationArray(BaseModel):
    areatype: str
    latitude: float
    longitude: float
    radius: str
    type: str
    units: str


class LocationArray2(BaseModel):
    region_id: str
    regiontype: str
    type: str


class Crs(BaseModel):
    properties: Properties4
    type: str


class Data(BaseModel):
    description: str
    groups: List[str]
    id: str
    name: str
    parameters: Parameters
    periods: List[str]
    slug: str
    version: str


class Data5(BaseModel):
    data: List[List[int]]
    metadata: Metadata1
    roadsegment: Roadsegment
    stats: Stats


class DescribeOccupationInsight(BaseModel):
    data: Data


class Feature(BaseModel):
    geometry: Geometry
    properties: Properties2
    type: str


class Feature1(BaseModel):
    geometry: Geometry
    properties: Properties3
    type: str


class Metadata(BaseModel):
    datetime: List[List[str]]
    display_groups: List[List[str]]
    units: Units


class Properties(BaseModel):
    field_properties: Properties1 = Field(..., alias='_properties')
    altname: str
    autocomplete: Autocomplete
    calculated_area_sq_meters: float
    name: str
    region_id: str
    regiontype: str
    state_code: str
    timestamp: str


class VehicleTrafficCountsforRoadSegment(BaseModel):
    data: List[Data5]


class Data1(BaseModel):
    data: List[List[str]]
    location: Location1
    location_index: int
    metadata: Metadata


class Data2(BaseModel):
    geometry: Geometry
    properties: Properties
    type: str


class Data3(BaseModel):
    features: List[Feature]
    type: str


class Data4(BaseModel):
    crs: Crs
    features: List[Feature1]
    type: str


class Describetheregionwithin5minutedriveTimeofageographicpoint(BaseModel):
    data: Data3


class FetchAdministrativeRegionsusingLatLng(BaseModel):
    data: List[Data2]


class Homevalueswithin1miRadiusofLocation(BaseModel):
    data: List[Data1]


class SearchRoadSegments(BaseModel):
    data: Data4
