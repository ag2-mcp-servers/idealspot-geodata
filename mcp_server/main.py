# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:49:45+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header, Path, Query

from models import (
    DescribeOccupationInsight,
    Describetheregionwithin5minutedriveTimeofageographicpoint,
    FetchAdministrativeRegionsusingLatLng,
    Homevalueswithin1miRadiusofLocation,
    ListAllLocalInsights,
    SearchRoadSegments,
    VehicleTrafficCountsforRoadSegment,
)

app = MCPProxy(
    contact={'x-twitter': 'Rapid_API'},
    description='Hyperlocal Demographics, Vehicle Traffic, Economic, Market Signals, and More. Use this API to request IdealSpot hyperlocal geospatial market insight and geometry data. \n\n## Detailed Description\n\nUse this API as your **local economy microscope** by querying [IdealSpot](https://www.idealspot.com) hyperlocal market insight and geometry data. We offer the most precise, extensive, and frequently-updated local market data in the US. Our data is available across the entire US and can be queried at geographic scales ranging from the micro (Census block) through the macro (nation).\n\nBetter data and analysis leads to a better understanding of local market opportunities and risks. Integrate with your commercial real estate and marketing applications, machine learning workflows, and other investment analytics.\n\nOur goal is to offer the most complete snapshot of the geographically distributed consumer and retail economy. We start with the fundamentals of consumers and business establishments. To connect retailers with consumers, we provide mobility data like vehicle traffic and mobile device data. To describe consumer intent, we provide geolocated digital marketing data. \n\nWe believe that accurate capital allocation through reliable local market data is foundational to creating robust, healthy, and livable communities for all. We hope you and your clients find tremendous value in this service.\n\n## Features\n\nQuery data and GeoJSON geometries at these scales for any US latitude and longitude:\n\n* Rings (0.5 km+)\n* Drive time (1-60 minutes)\n* Bike time (3-60 minutes)\n* Walk time (5-60 minutes)\n* Public transit time (5-60 minutes)\n* Administrative region (US, states, core-based statistical areas, counties, Census-designated places, Census tracts, zipcodes, Census block groups, opportunity zones)\n\n| Data Feature | Description |\n| ------- | ------------------------------|\n| Demographics, Housing, Spending | *Updated Quarterly*.  Current and historical market data including population, spending, and housing. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc |\n| Labor, Business Establishments, Economic Conditions | *Updated Quarterly*.  Traditional market data including workforce, business establishment counts, and economic conditions like local GDP, unemployment rates. Vendor (PopStats) is relied upon by Walgreens, Ulta Beauty, Blackstone, etc |\n| Consumer segmentation\t| *Updated Annually*. Demographics grouped into narrative-oriented segments. |\n| Vehicle Traffic |\t*Updated semi-annually*. Gold standard in vehicle traffic data from INRIX. Counts by day of week, time of day and side of street. |\n| Rings and Travel time polygons | *Estimate in Real-time*. Rings alongside drive time, walk time, bike time, and public transit time polygons. Request as GeoJSON geometries for mapping or use with data queries |\n| Administrative region polygons | *Updated Annually*. GeoJSON administrative regions from US Census Bureau: block groups, tracts, counties, CBSAs, states, opportunity zones, USPS zipcodes |\n| Internet Search Volumes | 30 day rolling averages for geolocated advertising potential across 450 business categories from major search engines |\n| Social Media Interest\t| 30 day rolling average for geolocated advertising potential across 450 business categories from major social networks |\n\n### Coming Soon!\n\nThis API powers our local market research platform at [IdealSpot.com](https://www.idealspot.com). The functionality exposed so far is only a portion of our current capabilities. We will be exposing additional API features in time so watch this space!\n\n| Data Feature | Description |\n| ------- | ------------------------------|\nMobile device visit counts, points of interest, brands | Fresh point of interest data across 3000+ brands, millions of POI, and historical foot traffic counts using mobile data for those points of interest\nOrigin/destination trips from mobile devices | Map origins and destinations of devices visiting an arbitrary catchment area\nCompetition search | Search all major point-of-interest aggregators in one query\nEnvironment/climate | Expected weather patterns like temperature and precipitation\nFilter search API | Query data for all counties in state, all tracts in MSA, etc\nRoad segment tiles | Plot road segments on maps in interactive applications\n\n## Developer Website\n\nFor more detail see https://developer.idealspot.com/',
    title='IdealSpot GeoData',
    version='1.0',
    servers=[{'url': 'https://idealspot-geodata.p.rapidapi.com/api/v1'}],
)


@app.get(
    '/data/insights',
    description=""" List all insights that the user has access to. This includes population, household income, crime statistics, walking traffic, vehicle traffic counts, employment, and much more, """,
    tags=['insight_retrieval'],
)
def fetch_available_insights(
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Fetch Available Insights
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/data/insights/{insight_id:}',
    description=""" Fetch request/response structure metadata for a given Insight. This provides you the periods of data available as well as any other parameters you may want to query the Insight by. Example Insights include population and market data such as: age, daytime population, avg. home value, crime indexes, foot traffic, employment, income, occupation, etc.  For the full-list see the developer documentation. """,
    tags=['insight_retrieval'],
)
def fetch_insight_query_parameters(
    insight_id_: str = Path(..., alias='insight_id:'),
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Fetch Insight Query Parameters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/data/insights/{insight_id:}/query',
    description=""" Execute a query for a given insight and location(s). Some Insights may require you to provide required options. ie., when querying `occupation` for White-Collar Workers, you can filter by opt=`{"data":{"category":[2469]}}`

For examples of `locations`, please see [Location API Documentation](https://idealspot.gitlab.io/developer-docs/#location) """,
    tags=['insight_retrieval', 'location_based_data'],
)
def query_insightat_location(
    version: str,
    location__: str = Query(..., alias='location[]'),
    insight_id_: str = Path(..., alias='insight_id:'),
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Query Insight at Location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/geometries/geometry',
    description=""" Fetch location GeoJSON """,
    tags=['location_based_data'],
)
def fetch_geometries(
    location__: str = Query(..., alias='location[]'),
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Fetch Geometries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/geometries/regions/intersecting/{latitude}/{longitude}',
    description=""" For given latitude and longitude, find intersecting administrative regions. Region polygons are simplified for web mapping. """,
    tags=['location_based_data'],
)
def fetch_administrative_regionsusing_lat__lng(
    latitude: float,
    longitude: float = ...,
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Fetch Administrative Regions using Lat/Lng
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/traffic/counts/{segment_id}',
    description=""" Time of day, day of week, and side of street vehicle traffic counts. """,
    tags=['traffic_information', 'location_based_data'],
)
def vehicle_traffic_countsfor_road_segment(
    segment_id: int,
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Vehicle Traffic Counts for Road Segment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/traffic/roads/nearest/{latitude}/{longitude}',
    description=""" For given latitude and longitude, find `n` nearest road segments """,
    tags=['location_based_data', 'traffic_information'],
)
def fetch_nearest_road_segments(
    n: int,
    latitude: float = ...,
    longitude: float = ...,
    x__rapid_a_p_i__key: str = Header(..., alias='X-RapidAPI-Key'),
    x__rapid_a_p_i__host: str = Header(..., alias='X-RapidAPI-Host'),
):
    """
    Fetch Nearest Road Segments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
